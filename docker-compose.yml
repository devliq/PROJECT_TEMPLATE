version: "3.8"

services:
  # =============================================================================
  # MAIN APPLICATION
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      # Enable BuildKit for better performance
      args:
        BUILDKIT_INLINE_CACHE: 1
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://user@pgbouncer:6432/myproject_db
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./05_ASSETS:/app/05_ASSETS:ro
      - ./06_CONFIG:/app/06_CONFIG:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M

  # =============================================================================
  # DATABASE
  # =============================================================================
  db:
    image: postgres:15.4-alpine
    environment:
      POSTGRES_DB: myproject_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./06_CONFIG/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d myproject_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app_network
    secrets:
      - postgres_password
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # =============================================================================
  # REDIS CACHE
  # =============================================================================
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./06_CONFIG/redis.conf:/etc/redis/redis.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app_network
    command: redis-server /etc/redis/redis.conf

  # =============================================================================
  # NGINX REVERSE PROXY
  # =============================================================================
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./06_CONFIG/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./05_ASSETS:/var/www/assets:ro
      - ssl_certs:/etc/ssl/certs
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MONITORING STACK
  # =============================================================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./06_CONFIG/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./06_CONFIG/alerting_rules.yml:/etc/prometheus/alerting_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
      - "--rule-files=/etc/prometheus/alerting_rules.yml"
    restart: unless-stopped
    networks:
      - monitoring_network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./06_CONFIG/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./06_CONFIG/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - monitoring_network
    secrets:
      - grafana_password
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    restart: unless-stopped
    networks:
      - monitoring_network
    deploy:
      mode: global

  # PostgreSQL Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: postgresql://user@db:5432/myproject_db?sslmode=disable
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - monitoring_network
      - app_network
    secrets:
      - postgres_password

  # Redis Exporter for cache metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.54.0
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ""
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - monitoring_network
      - app_network

  # =============================================================================
  # LOGGING STACK
  # =============================================================================

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    volumes:
      - ./06_CONFIG/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - logging_network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3100/ready",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - ./03_BUILD:/var/log/app:ro
      - ./06_CONFIG/promtail-config.yaml:/etc/promtail/config.yml:ro
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - logging_network
      - app_network

  # PgBouncer for connection pooling
  pgbouncer:
    image: edoburu/pgbouncer:1.18.0
    ports:
      - "6432:6432"
    environment:
      DATABASES: host=db port=5432 dbname=myproject_db user=user password_file=/run/secrets/postgres_password
      PGBOUNCER_LISTEN_PORT: 6432
      PGBOUNCER_MAX_CLIENT_CONN: 100
      PGBOUNCER_DEFAULT_POOL_SIZE: 20
    secrets:
      - postgres_password
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  ssl_certs:
    driver: local
  nginx_cache:
    driver: local

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

networks:
  app_network:
    driver: bridge
  monitoring_network:
    driver: bridge
  logging_network:
    driver: bridge
