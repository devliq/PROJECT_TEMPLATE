name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0' # Weekly on Sunday at midnight UTC

env:
  NODE_VERSION: '22.19.0'
  PYTHON_VERSION: '3.13.7'
  REGISTRY: ghcr.io

jobs:
  # =============================================================================
  # ENVIRONMENT SETUP
  # =============================================================================
  setup:
    name: Environment Setup
    runs-on: ubuntu-latest
    outputs:
      node-cache-hit: ${{ steps.node-cache.outputs.cache-hit }}
      python-cache-hit: ${{ steps.python-cache.outputs.cache-hit }}

    steps:
      - name: Checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache Node.js dependencies
        id: node-cache
        uses: actions/cache@master
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Python
        uses: actions/setup-python@master
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Cache Python dependencies
        id: python-cache
        uses: actions/cache@master
        with:
          path: |
            ~/.cache/pip
            venv/
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install Node.js dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Install Python dependencies
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black flake8

  # =============================================================================
  # CODE QUALITY CHECKS
  # =============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@master
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8

      # Node.js Quality Checks
      - name: Run ESLint
        run: npm run lint || (npm run lint:fix && exit 1)

      - name: Check Prettier formatting
        run: npm run format:check || (npm run format && echo "❌ Code formatting issues found and fixed. Please commit the changes." && exit 1)

      - name: Run TypeScript type checking
        run: npm run typecheck

      # Python Quality Checks
      - name: Run Flake8 linting
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run Black formatting check
        run: black --check --diff src/ tests/

  # =============================================================================
  # UNIT TESTING
  # =============================================================================
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [setup, quality]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@master
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      # Node.js Testing
      - name: Run Jest unit tests
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Upload Jest coverage
        uses: codecov/codecov-action@main
        with:
          file: ./coverage/lcov.info
          flags: nodejs
          fail_ci_if_error: false

      # Python Testing
      - name: Run pytest
        run: |
          cd tests
          python -m pytest --cov=../src --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Upload Python coverage
        uses: codecov/codecov-action@main
        with:
          file: ./tests/coverage.xml
          flags: python
          fail_ci_if_error: false

      # Test Results Artifacts
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@master
        with:
          name: test-results
          path: |
            coverage/
            tests/coverage.xml
            tests/htmlcov/
          retention-days: 30

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [setup, quality]
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Gitleaks Secret Scanning (REQUIRED TO PASS)
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@master
        with:
          config-path: .gitleaks.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Trivy Vulnerability Scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@main
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-vuln'

      # Trivy Dependency Scanner (Replacement for Snyk)
      - name: Run Trivy dependency scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-deps.sarif'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret'
          trivy-config: trivy.yaml

      - name: Upload Trivy dependency scan results
        uses: github/codeql-action/upload-sarif@main
        if: always()
        with:
          sarif_file: 'trivy-deps.sarif'
          category: 'trivy-deps'

      # Dependency Review (PR only)
      - name: Dependency Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@master

  # =============================================================================
  # BUILD AND ARTIFACTS
  # =============================================================================
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test, security]
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Set lowercase repository name
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@master
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build application
        run: |
          npm run build
          python setup.py build 2>/dev/null || echo "No Python build setup"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Build Docker image
        uses: docker/build-push-action@master
        with:
          context: .
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:latest npm test || echo "No test script in Docker"

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r src deployment/
          cp -r dist deployment/
          cp package.json requirements.txt deployment/
          tar -czf deployment-${{ github.sha }}.tar.gz deployment/

      - name: Upload build artifacts
        uses: actions/upload-artifact@master
        with:
          name: deployment-package
          path: deployment-${{ github.sha }}.tar.gz
          retention-days: 30

  # =============================================================================
  # END-TO-END TESTING (PR ONLY)
  # =============================================================================
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Cypress
        run: npm install cypress --save-dev

      - name: Run Cypress e2e tests
        uses: cypress-io/github-action@master
        with:
          build: npm run build
          start: npm start
          wait-on: 'http://localhost:3000'
          record: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          retention-days: 7

      - name: Upload Cypress videos
        if: always()
        uses: actions/upload-artifact@master
        with:
          name: cypress-videos
          path: cypress/videos
          retention-days: 7

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && github.event_name == 'push'
    environment: staging
    outputs:
      staging_url: ${{ steps.decrypt.outputs.template_mode == 'true' && 'http://localhost:3000' || steps.decrypt.outputs.staging_url }}
      template_mode: ${{ steps.decrypt.outputs.template_mode }}

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Download deployment artifact
        uses: actions/download-artifact@master
        with:
          name: deployment-package

      - name: Extract deployment artifact
        run: |
          tar -xzf deployment-${{ github.sha }}.tar.gz
          rm deployment-${{ github.sha }}.tar.gz

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Install tools
        run: |
          curl -L -o sops https://github.com/mozilla/sops/releases/download/v3.9.0/sops-v3.9.0.linux.amd64
          chmod +x sops
          curl -L -o age.tar.gz https://github.com/FiloSottile/age/releases/download/v1.1.1/age-v1.1.1-linux-amd64.tar.gz
          tar -xzf age.tar.gz

      - name: Decrypt secrets
        id: decrypt
        run: |
          pip install pyyaml

          # Check if secrets.enc.yaml contains placeholders (template mode)
          if grep -q "PLACEHOLDER_" secrets.enc.yaml; then
            echo "📋 Template mode detected - using placeholder values"
            STAGING_HOST_VALUE=$(python3 -c "import yaml; print(yaml.safe_load(open('secrets.enc.yaml'))['STAGING_HOST'])" )
            STAGING_USER_VALUE=$(python3 -c "import yaml; print(yaml.safe_load(open('secrets.enc.yaml'))['STAGING_USER'])" )
            STAGING_SSH_KEY_VALUE=$(python3 -c "import yaml; print(yaml.safe_load(open('secrets.enc.yaml'))['STAGING_SSH_KEY'])" )
            STAGING_PORT_VALUE=$(python3 -c "import yaml; print(yaml.safe_load(open('secrets.enc.yaml'))['STAGING_PORT'])" )
            STAGING_URL_VALUE=$(python3 -c "import yaml; print(yaml.safe_load(open('secrets.enc.yaml'))['STAGING_URL'])" )
            echo "STAGING_HOST=$STAGING_HOST_VALUE" >> $GITHUB_ENV
            echo "STAGING_USER=$STAGING_USER_VALUE" >> $GITHUB_ENV
            echo "STAGING_SSH_KEY=$STAGING_SSH_KEY_VALUE" >> $GITHUB_ENV
            echo "STAGING_PORT=$STAGING_PORT_VALUE" >> $GITHUB_ENV
            echo "STAGING_URL=$STAGING_URL_VALUE" >> $GITHUB_ENV
            echo "staging_url=$STAGING_URL_VALUE" >> $GITHUB_OUTPUT
          else
            echo "🔐 Encrypted secrets detected - decrypting with SOPS"
            echo "${{ secrets.AGE_PRIVATE_KEY }}" > age-key.txt
            ./sops --decrypt --age age-key.txt secrets.enc.yaml > secrets.yaml
            STAGING_HOST_VALUE=$(python3 -c "import yaml; print(yaml.safe_load(open('secrets.yaml'))['STAGING_HOST'])" )
            STAGING_USER_VALUE=$(python3 -c "import yaml; print(yaml.safe_load(open('secrets.yaml'))['STAGING_USER'])" )
            STAGING_SSH_KEY_VALUE=$(python3 -c "import yaml; print(yaml.safe_load(open('secrets.yaml'))['STAGING_SSH_KEY'])" )
            STAGING_PORT_VALUE=$(python3 -c "import yaml; print(yaml.safe_load(open('secrets.yaml'))['STAGING_PORT'])" )
            STAGING_URL_VALUE=$(python3 -c "import yaml; print(yaml.safe_load(open('secrets.yaml'))['STAGING_URL'])" )
            echo "STAGING_HOST=$STAGING_HOST_VALUE" >> $GITHUB_ENV
            echo "STAGING_USER=$STAGING_USER_VALUE" >> $GITHUB_ENV
            echo "STAGING_SSH_KEY=$STAGING_SSH_KEY_VALUE" >> $GITHUB_ENV
            echo "STAGING_PORT=$STAGING_PORT_VALUE" >> $GITHUB_ENV
            echo "STAGING_URL=$STAGING_URL_VALUE" >> $GITHUB_ENV
            echo "staging_url=$STAGING_URL_VALUE" >> $GITHUB_OUTPUT
          fi

          # Check if using placeholder values (template mode)
          if [[ "$STAGING_HOST_VALUE" == PLACEHOLDER_* ]] || [[ "$STAGING_USER_VALUE" == PLACEHOLDER_* ]] || [[ "$STAGING_SSH_KEY_VALUE" == PLACEHOLDER_* ]] || [[ "$STAGING_PORT_VALUE" == PLACEHOLDER_* ]] || [[ "$STAGING_URL_VALUE" == PLACEHOLDER_* ]]; then
            echo "📋 Template mode detected - staging deployment will be skipped"
            echo "template_mode=true" >> $GITHUB_OUTPUT
          else
            echo "template_mode=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to staging server
        if: steps.decrypt.outputs.template_mode != 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.STAGING_HOST }}
          username: ${{ env.STAGING_USER }}
          key: ${{ env.STAGING_SSH_KEY }}
          port: ${{ env.STAGING_PORT }}
          script: |
            cd /opt/myproject
            # Backup current deployment
            sudo cp -r app app.backup.$(date +%Y%m%d_%H%M%S) || true

            # Stop services
            sudo docker-compose down

            # Copy new files
            sudo cp -r ${{ github.workspace }}/* .

            # Start services
            sudo docker-compose up -d --build

            # Wait for health check
            sleep 30
            curl -f http://localhost:3000/health || exit 1

            # Clean up old backups (keep last 3)
            sudo ls -t app.backup.* | tail -n +4 | xargs sudo rm -rf || true

      - name: Skip staging deployment (template mode)
        if: steps.decrypt.outputs.template_mode == 'true'
        run: echo "📋 Skipping staging deployment - template mode detected"

  # =============================================================================
  # STAGING SMOKE TESTS
  # =============================================================================
  smoke-staging:
    name: Smoke Tests - Staging
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: success() && needs.deploy-staging.outputs.template_mode != 'true'

    steps:
      - name: Wait for staging deployment
        run: sleep 30

      - name: Run staging smoke tests
        run: |
          curl -f ${{ needs.deploy-staging.outputs.staging_url }}/health
          curl -f ${{ needs.deploy-staging.outputs.staging_url }}/api/status
          # Add more comprehensive smoke tests here

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [smoke-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Download deployment artifact
        uses: actions/download-artifact@master
        with:
          name: deployment-package

      - name: Extract deployment artifact
        run: |
          tar -xzf deployment-${{ github.sha }}.tar.gz
          rm deployment-${{ github.sha }}.tar.gz

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install production dependencies
        run: npm ci --production

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to production (Blue-Green)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd /opt/myproject

            # Determine which environment is currently active
            if [ -L current ] && [ -e current ]; then
              CURRENT_ENV=$(readlink current)
              if [ "$CURRENT_ENV" = "blue" ]; then
                TARGET_ENV="green"
              else
                TARGET_ENV="blue"
              fi
            else
              TARGET_ENV="blue"
            fi

            echo "Deploying to $TARGET_ENV environment"

            # Create target directory
            sudo mkdir -p $TARGET_ENV

            # Copy new files to target environment
            sudo cp -r ${{ github.workspace }}/* $TARGET_ENV/

            # Install dependencies in target environment
            cd $TARGET_ENV
            sudo npm ci --production

            # Run database migrations if needed
            sudo npm run migrate 2>/dev/null || echo "No migrations to run"

            # Build application
            sudo npm run build

            # Switch symlink to new environment
            sudo ln -sfn $TARGET_ENV current

            # Start services with new environment
            sudo docker-compose up -d --build

            # Wait for health check
            sleep 60
            curl -f http://localhost:3000/health || exit 1

            # If everything is good, stop old environment
            if [ "$CURRENT_ENV" != "$TARGET_ENV" ] && [ -n "$CURRENT_ENV" ]; then
              echo "Stopping old environment: $CURRENT_ENV"
              sudo docker-compose stop $CURRENT_ENV 2>/dev/null || true
            fi

  # =============================================================================
  # PRODUCTION SMOKE TESTS
  # =============================================================================
  smoke-production:
    name: Smoke Tests - Production
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()

    steps:
      - name: Wait for production deployment
        run: sleep 60

      - name: Run production smoke tests
        run: |
          curl -f ${{ secrets.PRODUCTION_URL }}/health
          curl -f ${{ secrets.PRODUCTION_URL }}/api/status
          # Add more comprehensive smoke tests here

  # =============================================================================
  # RENOVATE DEPENDENCY UPDATES
  # =============================================================================
  renovate:
    name: Renovate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Run Renovate
        uses: renovatebot/github-action@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          configurationFile: renovate.json

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notifications:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs:
      [quality, test, security, e2e, smoke-staging, smoke-production, renovate]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Generate workflow summary
        id: summary
        run: |
          echo "workflow_status=$(if [ "${{ needs.quality.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ]; then echo "success"; else echo "failure"; fi)" >> $GITHUB_OUTPUT
          echo "has_critical_issues=$(if [ "${{ needs.security.result }}" == "failure" ]; then echo "true"; else echo "false"; fi)" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@master
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          payload: |
            {
              "text": "CI/CD Pipeline ${{ steps.summary.outputs.workflow_status == 'success' && '✅ PASSED' || '❌ FAILED' }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "CI/CD Pipeline Results"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:* ${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:* ${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* ${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Triggered by:* ${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Quality Checks:* ${{ needs.quality.result == 'success' && '✅' || '❌' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Unit Tests:* ${{ needs.test.result == 'success' && '✅' || '❌' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Security Scan:* ${{ needs.security.result == 'success' && '✅' || '❌' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*E2E Tests:* ${{ needs.e2e.result == 'success' && '✅' || needs.e2e.result == 'skipped' && '⏭️' || '❌' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Renovate:* ${{ needs.renovate.result == 'success' && '✅' || needs.renovate.result == 'skipped' && '⏭️' || '❌' }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Staging Deploy:* ${{ needs.smoke-staging.result == 'success' && '✅' || needs.smoke-staging.result == 'skipped' && '⏭️' || '❌' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Production Deploy:* ${{ needs.smoke-production.result == 'success' && '✅' || needs.smoke-production.result == 'skipped' && '⏭️' || '❌' }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Details"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }

      - name: Create GitHub issue on critical failure
        if: steps.summary.outputs.has_critical_issues == 'true'
        uses: actions/github-script@master
        with:
          script: |
            const title = `🚨 Critical CI/CD Issues Detected - ${{ github.ref_name }}`;
            const body = `
            ## Critical Issues Found

            The CI/CD pipeline has detected critical issues that require immediate attention.

            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            ### Failed Checks:
            - Quality Checks: ${{ needs.quality.result == 'success' && '✅ PASSED' || '❌ FAILED' }}
            - Unit Tests: ${{ needs.test.result == 'success' && '✅ PASSED' || '❌ FAILED' }}
            - Security Scan: ${{ needs.security.result == 'success' && '✅ PASSED' || '❌ FAILED' }}
            - Renovate: ${{ needs.renovate.result == 'success' && '✅ PASSED' || needs.renovate.result == 'skipped' && '⏭️ SKIPPED' || '❌ FAILED' }}

            ### Next Steps:
            1. Review the workflow logs for detailed error information
            2. Address any security vulnerabilities found
            3. Fix any failing tests or quality checks
            4. Re-run the pipeline after fixes

            ---
            *This issue was automatically created by the CI/CD pipeline.*
            `;

            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['ci-failure', 'critical'],
              state: 'open'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('Critical CI/CD Issues') &&
              issue.title.includes(github.ref_name)
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['ci-failure', 'critical', 'automated']
              });
            }
